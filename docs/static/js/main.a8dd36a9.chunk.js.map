{"version":3,"sources":["serviceWorker.js","app/components/clock/LED.js","app/components/clock/LEDStrip.js","app/components/clock/BinaryClock.js","app/components/clock/DigitalClock.js","app/index.js","app/App.js","index.js"],"names":["Boolean","window","location","hostname","match","LED","isOn","className","classnames","LEDStrip","value","amount","useState","binaryValue","setBinaryValue","leds","i","push","key","useEffect","bStr","Number","toString","toBits","input","n","length","BinaryClock","props","time","setTime","hoursDigit1","hoursDigit2","minutesDigit1","minutesDigit2","secondsDigit1","secondsDigit2","partsOfTime","setPartsOfTime","getTime","a","async","Date","timeParts","toReadableTimeString","split","timerId","setInterval","clearInterval","t","date","h","getHours","m","getMinutes","s","getSeconds","DigitalClock","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8dd36a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport './LED.css';\n\nconst LED = ({ isOn = true }) => {\n  return (\n    <div className={classnames(\"led\", (isOn) ? \"led--ison\" : \"led--isoff\")}>\n    </div>\n  );\n};\n\nexport default LED;","import React, { useEffect, useState } from 'react';\n\nimport LED from './LED';\n\nconst LEDStrip = ({ value, amount = 1 }) => {\n  const [binaryValue, setBinaryValue] = useState(null);\n  const leds = [];\n  for(let i = 0; i < amount; i++) {\n    leds.push(<LED key={i} isOn={binaryValue !== null ? (binaryValue[i] == 1 ? true : false) : false } />);\n  }\n\n  useEffect(() => {\n    const bStr = Number(value).toString(2);\n    setBinaryValue(toBits(bStr, amount));\n  }, [value]);\n\n  const toBits = (input, n) => {\n    while (input.length < n) {\n      input = `0${input}`;\n    }\n    return input;\n  };\n\n  return (\n    <div className=\"led-strip\">\n      {leds}\n    </div>\n  );\n};\n\nexport default LEDStrip;","import React, { useEffect, useState } from 'react';\n\nimport LEDStrip from './LEDStrip';\n\nimport './BinaryClock.css';\n\nconst BinaryClock = (props) => {\n  const [time, setTime] = useState(null);\n  const [partsOfTime, setPartsOfTime] = useState({\n   hoursDigit1: 0,\n   hoursDigit2: 0,\n   minutesDigit1: 0,\n   minutesDigit2: 0,\n   secondsDigit1: 0,\n   secondsDigit2: 0\n  });\n\n  useEffect(() => {\n    async function getTime() {\n      setTime(new Date().getTime()); \n    }\n\n    if (!time) {\n      getTime();\n    } else {\n      const readableTimeString = toReadableTimeString(time);\n      const timeParts = readableTimeString.split(':');\n\n      setPartsOfTime({\n        hoursDigit1: timeParts[0][0],\n        hoursDigit2: timeParts[0][1],\n        minutesDigit1: timeParts[1][0],\n        minutesDigit2: timeParts[1][1],\n        secondsDigit1: timeParts[2][0],\n        secondsDigit2: timeParts[2][1]\n      });\n    }\n\n    const timerId = setInterval( () => getTime(), 500);\n\n    return () => clearInterval(timerId);\n  }, [time]);\n\n  const toReadableTimeString = (t) => {\n    const date = new Date(t);\n    const h = toBits(date.getHours().toString(), 2);\n    const m = toBits(date.getMinutes().toString(), 2);\n    const s = toBits(date.getSeconds().toString(), 2);\n\n    return `${h}:${m}:${s}`;\n  };\n\n  const toBits = (input, n) => {\n    while (input.length < n) {\n      input = `0${input}`;\n    }\n    return input;\n  };\n\n  return (\n    <div className=\"binary-clock\">\n      <LEDStrip value={partsOfTime.hoursDigit1} amount=\"2\" />\n      <LEDStrip value={partsOfTime.hoursDigit2} amount=\"4\" />\n      <LEDStrip value={partsOfTime.minutesDigit1} amount=\"3\" />\n      <LEDStrip value={partsOfTime.minutesDigit2} amount=\"4\" />\n      <LEDStrip value={partsOfTime.secondsDigit1} amount=\"3\" />\n      <LEDStrip value={partsOfTime.secondsDigit2} amount=\"4\" />\n    </div>\n  );\n}\n\nexport default BinaryClock;","import React, { useEffect, useState } from 'react';\n\nimport './DigitalClock.css';\n\nconst DigitalClock = (props) => {\n  const [time, setTime] = useState(null);\n  const [partsOfTime, setPartsOfTime] = useState({\n   hoursDigit1: 0,\n   hoursDigit2: 0,\n   minutesDigit1: 0,\n   minutesDigit2: 0,\n   secondsDigit1: 0,\n   secondsDigit2: 0\n  });\n\n  useEffect(() => {\n    async function getTime() {\n      setTime(new Date().getTime()); \n    }\n\n    if (!time) {\n      getTime();\n    } else {\n      const readableTimeString = toReadableTimeString(time);\n      const timeParts = readableTimeString.split(':');\n\n      setPartsOfTime({\n        hoursDigit1: timeParts[0][0],\n        hoursDigit2: timeParts[0][1],\n        minutesDigit1: timeParts[1][0],\n        minutesDigit2: timeParts[1][1],\n        secondsDigit1: timeParts[2][0],\n        secondsDigit2: timeParts[2][1]\n      });\n    }\n\n    const timerId = setInterval( () => getTime(), 500);\n\n    return () => clearInterval(timerId);\n  }, [time]);\n\n  const toReadableTimeString = (t) => {\n    const date = new Date(t);\n    const h = toBits(date.getHours().toString(), 2);\n    const m = toBits(date.getMinutes().toString(), 2);\n    const s = toBits(date.getSeconds().toString(), 2);\n\n    return `${h}:${m}:${s}`;\n  };\n\n  const toBits = (input, n) => {\n    while (input.length < n) {\n      input = `0${input}`;\n    }\n    return input;\n  };\n\n  return (\n    <div className=\"clock\">\n      <span className=\"clock__strip clock__strip--h1\">{partsOfTime.hoursDigit1}</span>\n      <span className=\"clock__strip clock__strip--h2\">{partsOfTime.hoursDigit2}</span>\n      <span className=\"clock__strip clock__strip--m1\">{partsOfTime.minutesDigit1}</span>\n      <span className=\"clock__strip clock__strip--m2\">{partsOfTime.minutesDigit2}</span>\n      <span className=\"clock__strip clock__strip--s1\">{partsOfTime.secondsDigit1}</span>\n      <span className=\"clock__strip clock__strip--s2\">{partsOfTime.secondsDigit2}</span>\n    </div>\n  );\n}\n\nexport default DigitalClock;","import App from './App';\nexport default App;","import React from 'react';\n\nimport { BinaryClock, DigitalClock } from './components';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <BinaryClock />\n      <DigitalClock />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}